---
const { width, height = "h-[35vh]", link } = Astro.props;
---

<div
  class=`card ${width} ${height} bg-[--bg-color] border border-neutral-600 overflow-hidden`
>
  <div class="card-content bg-[--bg-color] text-[--text-color] transition">
    <slot />
  </div>
</div>
<style is:global>
  #cards {
  }

  #cards:hover > .card::after {
    opacity: 1;
  }

  .card {
    border-radius: 12px;
    cursor: pointer;
    display: flex;
    flex-direction: column;
    position: relative;
  }

  .card:hover::before {
    opacity: 1;
  }

  .card::before,
  .card::after {
    content: "";
    height: 100%;
    left: 0px;
    opacity: 0;
    position: absolute;
    top: 0px;
    transition: opacity 500ms;
    width: 100%;
    pointer-events: none;
  }

  .card::before {
    background: radial-gradient(
      800px circle at var(--mouse-x) var(--mouse-y),
      rgba(255, 255, 255, 0.07),
      transparent 40%
    );
    z-index: 3;
  }

  .card::after {
    background: radial-gradient(
      600px circle at var(--mouse-x) var(--mouse-y),
      rgba(255, 255, 255, 0.9),
      transparent 40%
    );
    z-index: 1;
  }

  .card > .card-content {
    border-radius: 10px;
    display: flex;
    gap: 20px;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    flex-grow: 1;
    inset: 2px;
    position: absolute;
    z-index: 2;
  }
</style>

<script>
  document.getElementById("cards").onmousemove = (e) => {
    for (const card of document.getElementsByClassName("card")) {
      const rect = card.getBoundingClientRect(),
        x = e.clientX - rect.left,
        y = e.clientY - rect.top;

      card.style.setProperty("--mouse-x", `${x}px`);
      card.style.setProperty("--mouse-y", `${y}px`);
    }
  };
</script>
