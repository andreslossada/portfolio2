---
import GitHubIcon from "./icons/GitHubIcon.astro";
import LinkedInIcon from "./icons/LinkedIn.astro";
import EmailIcon from "./icons/EmailIcon.astro";
import "tippy.js/dist/tippy.css";
import "tippy.js/themes/light-border.css";
import "tippy.js/themes/translucent.css";
---

<!-- TODO: add a limiter to confetti like "we get it" -->
<footer>
  <nav class="">
    <ul
      class="flex justify-center text-white relative [&>li]:size-10 [&>li]:p-6 [&>li]:drop-shadow-[0px_0px_10px_rgba(0,0,0,0.75)]"
    >
      <li class="hover:scale-110 box-content">
        <a
          href="https://www.linkedin.com/in/andres-lossada22/"
          target="_blank"
          class=""
          id="linkedin"
        >
          <LinkedInIcon />
        </a>
      </li>
      <li class="hover:scale-110 box-content">
        <button class="size-full" id="email" data-confetti-button>
          <EmailIcon />
        </button>
      </li>
      <li class="hover:scale-110 box-content">
        <a
          href="https://github.com/dresan22"
          target="_blank"
          class=""
          id="github"
        >
          <GitHubIcon />
        </a>
      </li>
    </ul>
    <div
      id="menu-backdrop"
      class={`
        absolute  rounded
        translate-x-[var(--left)] translate-y-[var(--top)]
        left-0 top-0
        w-[var(--width)] h-[var(--height)]
         duration-1000
        ease-out opacity-0 -z-10
        blur-2xl
        `}
    >
    </div>
  </nav>
</footer>
<style is:global>
  .tippy-box[data-theme~="tomato"] {
    background-color: transparent;
    color: white;
    border: 0px solid var(white);
    box-shadow: 0px 0px 0px 2px white inset;
    width: 18ch;
    padding-bottom: 4px;
    text-align: center;
  }
  .tippy-box[data-theme~="tomato"][data-placement^="bottom"]
    > .tippy-arrow::before {
    border-bottom-color: white;
  }
</style>
<script src="../utils/tooltip"></script>
<script>
  import { fireAll } from "../utils/confetti";
  import { showToast } from "../utils/toaster";
  let clickCounter = 0;
  let maxClicks = 6;
  let resetTime = 5000;
  const emailButton = document.getElementById("email");

  emailButton.addEventListener("click", () => {
    clickCounter++;
    if (clickCounter > maxClicks) {
      fireAll();
      showToast(`It's fun, isn't it?`);
    } else {
      navigator.clipboard.writeText("andres.lu22@gmail.com");
      fireAll();
      showToast("Email copied");
    }
  });

  setInterval(function () {
    clickCounter = 0;
  }, resetTime);
</script>

<script>
  import colorObj from "@/utils/colors";

  window.addEventListener("DOMContentLoaded", (event) => {
    const listItem = document.querySelectorAll("nav li");
    const menuBackDrop = document.querySelector(
      "#menu-backdrop"
    ) as HTMLElement;

    // Delay setting the initial position to allow the browser to restore scroll position
    setTimeout(() => {
      const firstItem = listItem[0] as HTMLElement;
      const { left, top } = firstItem.getBoundingClientRect();
      const scrollLeft =
        window.pageXOffset || document.documentElement.scrollLeft;
      const scrollTop =
        window.pageYOffset || document.documentElement.scrollTop;

      // Temporarily disable transition
      menuBackDrop.style.transition = "none";

      menuBackDrop.style.setProperty("--left", `${left + scrollLeft}px`);
      menuBackDrop.style.setProperty("--top", `${top + scrollTop}px`);

      menuBackDrop.style.opacity = "0";
      menuBackDrop.style.visibility = "hidden";

      // Re-enable transition after a short delay
      setTimeout(() => {
        menuBackDrop.style.transition = "";
      }, 50);
    }, 100);

    listItem.forEach((item, index) => {
      item.addEventListener("mouseenter", () => {
        const { left, top, width, height } = item.getBoundingClientRect();
        const scrollLeft =
          window.pageXOffset || document.documentElement.scrollLeft;
        const scrollTop =
          window.pageYOffset || document.documentElement.scrollTop;

        menuBackDrop.style.setProperty("--left", `${left + scrollLeft + 15}px`);
        menuBackDrop.style.setProperty("--top", `${top + scrollTop + 15}px`);
        menuBackDrop.style.setProperty("--width", `${width - 30}px`);
        menuBackDrop.style.setProperty("--height", `${height - 30}px`);
        switch (index) {
          case 0:
            menuBackDrop.style.backgroundColor = colorObj["letter-a"];
            break;
          case 1:
            menuBackDrop.style.backgroundColor = colorObj["letter-n"];
            break;
          case 2:
            menuBackDrop.style.backgroundColor = colorObj["letter-d"];
            break;
          default:
            menuBackDrop.style.backgroundColor = "white";
        }

        menuBackDrop.style.opacity = "1";
        menuBackDrop.style.visibility = "visible";
      });

      item.addEventListener("mouseleave", () => {
        menuBackDrop.style.opacity = "0";
        menuBackDrop.style.visibility = "hidden";
      });
    });

    window.addEventListener("DOMContentLoaded", (event) => {
      const listItem = document.querySelectorAll("nav li");

      listItem.forEach((item) => {
        item.classList.add("transition");
      });
    });
  });
</script>
